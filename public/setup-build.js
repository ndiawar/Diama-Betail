import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('=== Configuration compl√®te du build ===');

// Chemins des fichiers
const buildDir = path.join(__dirname, 'build');

// V√©rifier que le dossier build existe
if (!fs.existsSync(buildDir)) {
    console.error('‚ùå Dossier build non trouv√© !');
    process.exit(1);
}

console.log('‚úÖ Dossier build trouv√©');

// 1. Copier les favicons
console.log('\n1. Copie des favicons...');
const faviconFiles = ['favicon.svg', 'favicon.png', 'favicon.ico'];

faviconFiles.forEach(file => {
    const sourcePath = path.join(__dirname, file);
    const destPath = path.join(buildDir, file);
    
    if (fs.existsSync(sourcePath)) {
        fs.copyFileSync(sourcePath, destPath);
        console.log(`‚úÖ ${file} copi√©`);
    } else {
        console.log(`‚ö†Ô∏è  ${file} non trouv√©`);
    }
});

// 2. Cr√©er le fichier _redirects
console.log('\n2. Cr√©ation du fichier _redirects...');
const redirectsContent = '/*    /index.html   200';
fs.writeFileSync(path.join(buildDir, '_redirects'), redirectsContent);
console.log('‚úÖ _redirects cr√©√©');

// 3. Cr√©er le fichier _headers
console.log('\n3. Cr√©ation du fichier _headers...');
const headersContent = `/*.css
  Content-Type: text/css

/*.js
  Content-Type: application/javascript

/*.json
  Content-Type: application/json

/*
  X-Frame-Options: DENY
  X-Content-Type-Options: nosniff`;
fs.writeFileSync(path.join(buildDir, '_headers'), headersContent);
console.log('‚úÖ _headers cr√©√©');

// 4. Cr√©er le fichier .htaccess
console.log('\n4. Cr√©ation du fichier .htaccess...');
const htaccessContent = `# Forcer les types MIME corrects
<FilesMatch "\\.css$">
    Header set Content-Type "text/css"
</FilesMatch>

<FilesMatch "\\.js$">
    Header set Content-Type "application/javascript"
</FilesMatch>

<FilesMatch "\\.json$">
    Header set Content-Type "application/json"
</FilesMatch>

# Redirection pour les routes SPA
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ /index.html [L]`;
fs.writeFileSync(path.join(buildDir, '.htaccess'), htaccessContent);
console.log('‚úÖ .htaccess cr√©√©');

// 5. V√©rifier les fichiers principaux
console.log('\n5. V√©rification des fichiers principaux...');
const requiredFiles = ['index.html', 'assets/app.js', 'assets/main.css'];
let allFilesExist = true;

requiredFiles.forEach(file => {
    const filePath = path.join(buildDir, file);
    if (fs.existsSync(filePath)) {
        console.log(`‚úÖ ${file} trouv√©`);
    } else {
        console.log(`‚ùå ${file} manquant`);
        allFilesExist = false;
    }
});

if (allFilesExist) {
    console.log('\nüéâ Configuration du build termin√©e avec succ√®s !');
} else {
    console.log('\n‚ö†Ô∏è  Certains fichiers sont manquants');
    process.exit(1);
} 